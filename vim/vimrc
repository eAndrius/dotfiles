" Gideon's .vimrc
" ===============

" Plugins (must be first) {{{
call plug#begin('~/.vim/plugged')
" Plugins: syntax {{{
Plug 'cespare/vim-toml' " toml support
Plug 'chrisbra/csv.vim' " csv syntax
Plug 'eraserhd/parinfer-rust', {'do': 'cargo build --release'} " parinfer for clojure
Plug 'guns/vim-clojure-static' " clojure syntax highlighting
Plug 'lervag/vimtex' " latex support with txt-objs and autocomplete
Plug 'leshill/vim-json' " json syntax
Plug 'mxw/vim-jsx' " jsx syntax
Plug 'pangloss/vim-javascript'
Plug 'rust-lang/rust.vim' " rust support (official)
Plug 'tpope/vim-markdown' " markdown support
Plug 'w0rp/ale' " async syntax checking
" }}}
" Plugins: theming {{{
Plug 'morhetz/gruvbox' " gruvbox theme
Plug 'vim-airline/vim-airline' " status bar for showing useful things
" }}}
" Plugins: other {{{
Plug 'AndrewRadev/splitjoin.vim' " Split (gS) and join (gJ) blocks
Plug 'SirVer/ultisnips' " snippet support
Plug 'Xuyuanp/nerdtree-git-plugin' " plugin for git flags in nerdtree
Plug 'airblade/vim-gitgutter' " git status gutter + hunk staging
Plug 'christoomey/vim-tmux-navigator' " Navigation across vim and tmux splits
Plug 'ctrlpvim/ctrlp.vim' " Fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } " Fuzzy finding
Plug 'junegunn/fzf.vim' " Fuzzy finding for things within vim
Plug 'junegunn/gv.vim' " nice git-history browsing
Plug 'junegunn/vim-peekaboo' " view registers using \" and @ (or C-R in insert mode)
Plug 'ludovicchabant/vim-gutentags' " Manage ctags files nicely
Plug 'majutsushi/tagbar' " for displaying ctags
Plug 'scrooloose/nerdtree' " file tree view
Plug 'terryma/vim-multiple-cursors' " multi-cursor support
Plug 'tmux-plugins/vim-tmux-focus-events' " make vim listen to tmux focus events
Plug 'tpope/vim-commentary' " for commenting things out
Plug 'tpope/vim-dispatch' " async command dispatch
Plug 'tpope/vim-endwise' " helps with ending of structures
Plug 'tpope/vim-eunuch' " file manipulation
Plug 'tpope/vim-fugitive' " Git things
Plug 'tpope/vim-repeat' " add . repeating to plugins
Plug 'tpope/vim-surround' " change+add surrounding things
Plug 'wellle/targets.vim' " useful text blocks
" }}}
call plug#end()
" }}}
" Theming {{{
" colour scheme
colorscheme gruvbox
set termguicolors
set background=dark
" airline config
let g:airline_section_z = ''
" enable airline ALE support
let g:airline#extensions#ale#enabled = 1
" }}}
" Leader shortcuts {{{
let mapleader="," " http://usevim.com/2012/07/20/vim101-leader/
noremap \ ,
" }}}
" Plugin config {{{
" Plugin: UltiSnips {{{
let g:UltiSnipsExpandTrigger="<tab>"
" }}}
" Plugin: ALE {{{
" don't open list automatically, I'll do it when I want to
let g:ale_open_list = 0
nmap <leader>ak <Plug>(ale_previous_wrap)
nmap <leader>aj <Plug>(ale_next_wrap)
" }}}
" Plugin: FZF {{{
let g:fzf_layout = {}
" ,t for FZF
map <leader>t :FZF!<cr>
" }}}
" Plugin: CtrlP {{{
" only show files that are not ignored by git
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
" }}}
" }}}
" Searching {{{
" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault
" only case-insensitive searching when search includes upper case
set ignorecase smartcase
" move the cursor to the matched string, while typing the search pattern
set incsearch
" highlight all pattern matches
set hlsearch
" Keep search matches in the middle of the window.
" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
nnoremap n nzzzv
nnoremap N Nzzzv
" }}}
" Lang {{{
" Lang: defaults {{{
" default wrap width
set textwidth=80
" formatting with comments, gq and numbered lists
set fo=cqnj
" uses spaces instead of tabs
set expandtab
" like four spaces per tab
set tabstop=4
" and the same for auto-indentation
set shiftwidth=4
" and this handles inserting \t chars in insert mode
set softtabstop=4
" keep my indentation on new lines
set autoindent
" par gives nicer paragraph wrapping
set formatprg=par\ r80
" }}}
" Lang: javascript {{{
" allow syntax highlighting for jsdocs
let g:javascript_plugin_jsdoc = 1
" assume jsx for js files
let g:jsx_ext_required = 0
" }}}
" Lang: FileType {{{
" enable filetype detection:
filetype on
filetype plugin on " load filetype plugins
filetype indent on " file type based indentation
" markdown: set automatic text wrapping
autocmd FileType markdown setlocal fo+=t
" yaml: set tab width to 2
autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2
" make: don't expand tabs into spaces
autocmd BufEnter Makefile setlocal noexpandtab
" }}}
" }}}
" Folding {{{
" preferred foldmethod=synax but this slows insert down insanely :(
set foldmethod=indent
" unfold to a reasonable extent when opening a file
set foldlevelstart=99
" use space rather than za to fold/unfold
nnoremap <Space> za
" }}}
" UI {{{
" UI: splits {{{
" make splits a bit more natural (bottom right rather than top left)
set splitbelow
set splitright
" ,v for vsplit
nnoremap <leader>v :vsplit<CR>
" ,s for split
nnoremap <leader>s :split<CR>
" }}}
" UI: command line completions {{{
set wildmode=full " Complete first full match, next match, etc.
set wildmenu " visual autocomplete for the command menu
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux
" }}}
" UI: misc {{{
syntax enable " enable syntax highlighting
set cursorline " highlight current line
set number " show line numbers
set relativenumber " show line numbers relative to the current one
set scrolloff=5 " min lines around cursor (stops things being at the edge of the screen)
set showmatch " highlight matching [{()}]
" }}}
" }}}
" Functions {{{
" Functions: automatically create directories on save if necessary {{{
" http://stackoverflow.com/a/4294176/907981
function! s:MkNonExDir(file, buf)
      if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
          if !isdirectory(dir)
            call mkdir(dir, 'p')
          endif
      endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
" }}}
" Functions: export current markdown document as pdf {{{
function! ExportMarkdownToPdf(destination)
    call system("pandoc --from=markdown --latex-engine=xelatex -o " . shellescape(a:destination) . " " . shellescape(expand("%")))
endfunction
" }}}
" }}}
" Backups {{{
set nobackup
set nowritebackup
set noswapfile
" }}}
" Misc {{{
set modelines=1 " allows specific vim config in file footers

" Make the % matching more powerful
" See http://www.catonmat.net/blog/vim-plugins-matchit-vim/
runtime macros/matchit.vim

" mouse support
set mouse=a

" auto-read files when switching back into VIM
set autoread

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
set timeout timeoutlen=500 ttimeoutlen=100

" make history 100 long
set history=100

set linebreak " insert linebreak characters when pressing enter for wrapping

" http://robots.thoughtbot.com/faster-grepping-in-vim/
if executable('ag')
    " use ag instead of grep
    set grepprg=ag\ --nogroup\ --nocolor
endif
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
" }}}

" Footer: modeline
" vim:foldmethod=marker:foldlevelstart=0
