call plug#begin('~/.vim/plugged')

" Syntax Plugins
Plug 'tpope/vim-git' " git files
Plug 'othree/yajs.vim' " javascript
Plug 'othree/javascript-libraries-syntax.vim' " various JS libraries
Plug 'mxw/vim-jsx'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'heavenshell/vim-jsdoc'
Plug 'othree/html5.vim'
Plug 'chrisbra/csv.vim'
Plug 'leshill/vim-json'
Plug 'tpope/vim-markdown'
Plug 'andersoncustodio/vim-tmux'
Plug 'JulesWang/css.vim' | Plug 'genoma/vim-less' " LESS requires CSS runtimes
Plug 'scrooloose/syntastic' " external syntax checkers

" Theming
Plug 'bling/vim-airline'
Plug 'jdkanani/vim-material-theme'
Plug 'chriskempson/base16-vim'

" Other plugins
" Plug 'Valloric/YouCompleteMe' " autocompleter
Plug 'tpope/vim-dispatch' " async command dispatch
Plug 'SirVer/ultisnips' " snippet support
Plug 'tpope/vim-endwise' " helps with ending of structures
Plug 'tpope/vim-surround' " change+add surrounding things
Plug 'tpope/vim-repeat' " add . repeating to plugins
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } " Fuzzy finding
Plug 'christoomey/vim-tmux-navigator' " Navigation across vim and tmux splits
Plug 'tpope/vim-eunuch' " file manipulation
Plug 'editorconfig/editorconfig-vim' " editorconfig
Plug 'tpope/vim-commentary' " for commenting things out
Plug 'tpope/vim-fugitive' " Git things
Plug 'kana/vim-textobj-user' " Helps with defining custom text blocks
Plug 'poetic/vim-textobj-javascript' " Javascript closure with ac,ic
Plug 'wellle/targets.vim' " useful text blocks
Plug 'ahw/vim-pbcopy' " Sends stuff to OS X clipboard via 'cy'
Plug 'AndrewRadev/splitjoin.vim' " Split (gS) and join (gJ) blocks
Plug 'jlanzarotta/bufexplorer' " Buffer explorer
Plug 'kien/rainbow_parentheses.vim' " Colour matching parentheses
Plug 'tmux-plugins/vim-tmux-focus-events' " make vim listen to tmux focus events
Plug 'junegunn/vim-easy-align' " easy alignment of all the things
Plug 'junegunn/goyo.vim' " distraction-free writing in VIM
Plug 'junegunn/limelight.vim' " focussed writing in VIM

call plug#end()

filetype plugin indent on

" Make the % matching more powerful
runtime macros/matchit.vim

" status bar stuff
set laststatus=2                        " Always show a statusline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_section_warning = ''
let g:airline#extensions#tabline#enabled = 0

" snippet stuff
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" we use react,lodash for javascript
let g:used_javascript_libs = 'react,lodash'

" assume jsx for js files
let g:jsx_ext_required = 0

" use eslint syntax checker
let g:syntastic_javascript_checkers = ['eslint']

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" auto-read files when switching back into VIM
set autoread

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100

" fold with space, but don't autofold when opening
set foldmethod=indent
set foldlevelstart=999
nnoremap <Space> za

set history=100

set textwidth=90
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent

" only case-insensitive searching when search includes upper case
set ignorecase smartcase

" spelling and syntax
set spelllang=en_gb
syntax spell toplevel

autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0

set linebreak " insert linebreak characters when pressing enter for wrapping

set incsearch " move the cursor to the matched string, while typing the search pattern
set hlsearch " highlight all pattern matches

set scrolloff=10 " min 10 lines around cursor (stops things being at the edge of the screen)

set nobackup
set nowritebackup
set noswapfile

set backspace=indent,eol,start

set wildmode=full " Complete first full match, next match, etc.
set wildmenu " command-line completion operates in an enhanced mode
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

let mapleader="," " http://usevim.com/2012/07/20/vim101-leader/
noremap \ ,

set number " show line numbers
set relativenumber " show line numbers relative to the current one

" colours
set background=dark
colorscheme base16-flat

set colorcolumn=90 " set a line at 90

set list listchars=tab:»·,trail:· " highlight certain chars

command! Q q " make Q = q!

" slightly more natural splitting
set splitbelow
set splitright

set lazyredraw " apparently this speeds things up sometimes

" jsdoc settings
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1
let g:jsdoc_enable_es6=1

" --- Mappings ---
" no accidental ex-mode presses
map Q <Nop>


map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>

map <leader>t :FZF!<cr>   " ,t for FZF
map <leader>v :vsplit<CR> " ,v for vsplit
map <leader>s :split<CR>  " ,s for split
map <leader>esl :Dispatch eslint %<CR> " ,esl for eslinting the current file

" in visual mode, let '.' return to normal mode
vnoremap . :norm.<CR>
" in normal mode, carriage-return removes search highlighting
nnoremap <CR> :noh<CR><CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" useful things
noremap H ^
noremap L $
vnoremap L g_

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Uppercase word mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
inoremap <C-u> <esc>mzgUiw`za

" automatically create directories on save if necessary
" http://stackoverflow.com/a/4294176/907981
function! s:MkNonExDir(file, buf)
      if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
          if !isdirectory(dir)
            call mkdir(dir, 'p')
          endif
      endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
